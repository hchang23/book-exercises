fct_recode(Training = "1", Test = "2")
data_total <- rbind(df_test, df_train)
data_total <- data.frame(x, y, "split" = split)
# split plot
g_split <- ggplot(data_total, aes(x, y, color = split)) +
geom_point() +
labs(title = "Sample-splitting") +
my_theme
# train on training split
data_train <- data_total %>%
filter(split == "Training")
lm_10 <- lm(y ~ poly(x, 10), data = data_train)
# predict on second half
data_test <- data_total %>%
filter(split == "Test")
pred_10 <- predict(lm_10, data.frame(x = data_test$x))
# test error
test_err_10 <- mean((data_test$y - pred_10)^2)
# create smooth lines for plot
x_fit <- data.frame(x = seq(min(data_total$x), max(data_total$x), length = 100))
line_fit_10 <- data.frame(x = x_fit, y = predict(lm_10, newdata = x_fit))
# add lin model and subtitle
g_split +
labs(subtitle = paste("Degree 10 Test error:", round(test_err_10, 3))) +
geom_line(data = line_fit_10, aes(y = y, x = x), col = "black", lwd = 1.5)
View(lm_fit)
View(lm_1)
View(lm_10)
View(data_train)
View(df_train)
View(df_test)
View(data_total)
data_total <- rbind(df_test, df_train)
# randomly split data into two parts
inds <- sample(rep(1:2, length = 60))
split <- as.factor(inds) %>%
fct_recode(Training = "1", Test = "2")
data_total <- rbind(df_test, df_train)
data_total <- data.frame(x, y, "split" = split)
# train on training split
data_train <- data_total %>%
filter(split == "Training")
set.seed(302)
# randomly split data into two parts
inds <- sample(rep(1:2, length = 60))
split <- as.factor(inds) %>%
fct_recode(Training = "1", Test = "2")
data_total <- rbind(df_test, df_train)
data_total <- data.frame(x, y, "split" = split)
# split plot
g_split <- ggplot(data_total, aes(x, y, color = split)) +
geom_point() +
labs(title = "Sample-splitting") +
my_theme
# train on training split
data_train <- data_total %>%
filter(split == "Training")
lm_10 <- lm(y ~ poly(x, 10), data = data_train)
# predict on second half
data_test <- data_total %>%
filter(split == "Test")
pred_10 <- predict(lm_10, data.frame(x = data_test$x))
# test error
test_err_10 <- mean((data_test$y - pred_10)^2)
# create smooth lines for plot
x_fit <- data.frame(x = seq(min(data_total$x), max(data_total$x), length = 100))
line_fit_10 <- data.frame(x = x_fit, y = predict(lm_10, newdata = x_fit))
# add lin model and subtitle
g_split +
labs(subtitle = paste("Degree 10 Test error:", round(test_err_10, 3))) +
geom_line(data = line_fit_10, aes(y = y, x = x), col = "black", lwd = 1.5)
# train on training split
lm_1 <- lm(y ~ x, data = data_train)
# predict on second half
pred_1 <- predict(lm_1, data.frame(x = data_test$x))
# test error
test_err_1 <- mean((data_test$y - pred_1)^2)
# create smooth line for plot
line_fit_1 <- data.frame(x = x_fit, y = predict(lm_1, newdata = x_fit))
# add lin model and subtitle
g_split +
labs(subtitle = paste("Degree 1 Test error:", round(test_err_1, 3))) +
geom_line(data = line_fit_1, aes(y = y, x = x), col = "black", lwd = 1.5)
set.seed(302)
# randomly split data into two parts
inds <- sample(rep(1:2, length = n))
split <- as.factor(inds) %>%
fct_recode(Training = "1", Test = "2")
data_total <- rbind(df_test, df_train)
data_total <- data.frame(x, y, "split" = split)
# split plot
g_split <- ggplot(data_total, aes(x, y, color = split)) +
geom_point() +
labs(title = "Sample-splitting") +
my_theme
# train on training split
# data_train <- data_total %>%
#   filter(split == "Training")
# lm_10 <- lm(y ~ poly(x, 10), data = data_train)
#
# # predict on second half
# data_test <- data_total %>%
#   filter(split == "Test")
# pred_10 <- predict(lm_10, data.frame(x = data_test$x))
# test error
test_err_10 <- test_err[[10]]
# create smooth lines for plot
x_fit <- data.frame(x = seq(min(data_total$x), max(data_total$x), length = 100))
line_fit_10 <- data.frame(x = x_fit, y = predict(lm_fit[[10]], newdata = x_fit))
# add lin model and subtitle
g_split +
labs(subtitle = paste("Degree 10 Test error:", round(test_err_10, 3))) +
geom_line(data = line_fit_10, aes(y = y, x = x), col = "black", lwd = 1.5)
# test error
test_err_1 <- test_err[[1]]
# test error
test_err_1 <- test_err[[1]]
# create smooth line for plot
line_fit_1 <- data.frame(x = x_fit, y = predict(lm.fit[[1]], newdata = x_fit))
# test error
test_err_1 <- test_err[[1]]
# create smooth line for plot
line_fit_1 <- data.frame(x = x_fit, y = predict(lm_fit[[1]], newdata = x_fit))
lm_fit[[1]]
lm_fit[[10]]
# empty list of 10
lm_fit <- rep(list(NA), 10)
# fit k degree polynomial
for (i in 1:10) {
lm_fit[[i]] <- lm(y ~ poly(x, i), data = df_train)
}
# test error
test_err_1 <- test_err[[1]]
# create smooth line for plot
line_fit_1 <- data.frame(x = x_fit, y = predict(lm_fit[[1]], newdata = x_fit))
# create smooth line for plot
line_fit_1 <- data.frame(x = x_fit, y = predict(lm_fit[[2]], newdata = x_fit))
# create smooth line for plot
line_fit_1 <- data.frame(x = x_fit, y = predict(lm_fit[[10]], newdata = x_fit))
# test error
test_err_1 <- test_err[[1]]
# create smooth line for plot
line_fit_1 <- data.frame(x = x_fit, y = predict(lm_fit[[1]], newdata = x_fit))
lmfit1 <- lm_fit[[1]]
# create smooth line for plot
line_fit_1 <- data.frame(x = x_fit, y = predict(lmfit1, newdata = x_fit))
# test error
test_err_1 <- test_err[[1]]
# create smooth line for plot
line_fit_1 <- data.frame(x = x_fit, y = predict(lm_fit[[1]], newdata = x_fit))
# add lin model and subtitle
g_split +
labs(subtitle = paste("Degree 1 Test error:", round(test_err_1, 3))) +
geom_line(data = line_fit_1, aes(y = y, x = x), col = "black", lwd = 1.5)
form = as.formula(paste0("y ~", "poly(x, ", i, ")"))
models <- lapply(1:10, function(i){
form = as.formula(paste0("y ~", "poly(x, ", i, ")"))
lm(form, data = df_train)
})
View(models)
# create smooth line for plot
line_fit_1 <- data.frame(x = x_fit, y = predict(models[[1]], newdata = x_fit))
# test error
test_err_1 <- test_err[[1]]
models <- lapply(1:10, function(i){
form = as.formula(paste0("y ~", "poly(x, ", i, ")"))
lm(form, data = df_train)
})
# create smooth line for plot
line_fit_1 <- data.frame(x = x_fit, y = predict(models[[1]], newdata = x_fit))
# add lin model and subtitle
g_split +
labs(subtitle = paste("Degree 1 Test error:", round(test_err_1, 3))) +
geom_line(data = line_fit_1, aes(y = y, x = x), col = "black", lwd = 1.5)
View(models)
# test error
test_err_1 <- test_err[[1]]
# fix fitting error
models <- lapply(1:10, function(i){
form = as.formula(paste0("y ~", "poly(x, ", i, ")"))
lm(form, data = df_train)
})
# create smooth line for plot
line_fit_1 <- data.frame(x = x_fit, y = predict(models[[1]], newdata = x_fit))
# add lin model and subtitle
g_split +
labs(subtitle = paste("Degree 1 Test error:", round(test_err_1, 3))) +
geom_line(data = line_fit_1, aes(y = y, x = x), col = "black", lwd = 1.5)
View(models)
View(lm_fit)
# test error
test_err_1 <- test_err[[1]]
# fix fitting error
lm_fit_1 <- lapply(1:10, function(i){
form = as.formula(paste0("y ~", "poly(x, ", i, ")"))
lm(form, data = df_train)
})
# create smooth line for plot
line_fit_1 <- data.frame(x = x_fit, y = predict(lm_fit_1[[1]], newdata = x_fit))
# add lin model and subtitle
g_split +
labs(subtitle = paste("Degree 1 Test error:", round(test_err_1, 3))) +
geom_line(data = line_fit_1, aes(y = y, x = x), col = "black", lwd = 1.5)
knitr::opts_chunk$set(echo = TRUE)
data(iris)
force(iris)
View(iris)
install.packages("rsample")
?rsample
??rsample
# function: my_knn_cv, predicts output class using covariates
# input: train, data frame; cl, true class value of training data;
# k_nn, integer of neighbors; k_cv, integer of folds
# output: a list with objects class, a vector of predicted class
# and cv_error, a numeric with cross-validation misclassification error
my_knn_cv <- function(train, cl, k_nn, k_cv) {
}
library(class)
install.packages("randomForest")
library(randomForest)
library(randomForest)
?knn
k_cv <- 5
k_nn <- 5
cl <- iris$Species
cl
train <- iris
# sample size
n <- nrow(train)
# randomly assign observations to variable folds
folds <- sample(rep(1:k_cv, length = n))
data <- data.frame(train, "split" = folds)
View(data)
View(data)
# sample size
n <- nrow(train)
# randomly assign observations to variable folds
folds <- sample(rep(1:k_cv, length = n))
train$split <- folds
View(train)
# loop through folds
for(i in 1:k_cv) {
data_train <- data %>% filter(split != i)
data_test <- data %>% filter(split == i)
cl_train <- cl[folds != i]
cl_test <- cl[folds == i]
knn_output <- knn(data_train, data_test, cl_train, k_nn)
}
library(dplyr)
# loop through folds
for(i in 1:k_cv) {
data_train <- data %>% filter(split != i)
data_test <- data %>% filter(split == i)
cl_train <- cl[folds != i]
cl_test <- cl[folds == i]
knn_output <- knn(data_train, data_test, cl_train, k_nn)
}
# loop through folds
for(i in 1:k_cv) {
data_train <- train %>% filter(split != i)
data_test <- train %>% filter(split == i)
cl_train <- cl[folds != i]
cl_test <- cl[folds == i]
knn_output <- knn(data_train, data_test, cl_train, k_nn)
}
folds
cl
cl$folds <- folds
# function: my_knn_cv, predicts output class using covariates
# input: train, data frame; cl, true class value of training data;
# k_nn, integer of neighbors; k_cv, integer of folds
# output: a list with objects class, a vector of predicted class
# and cv_error, a numeric with cross-validation misclassification error
my_knn_cv <- function(train, cl, k_nn, k_cv) {
# sample size
n <- nrow(train)
# randomly assign observations to variable folds
folds <- sample(rep(1:k_cv, length = n))
# add split to data frame
train$split <- folds
cl$folds <- folds
# loop through folds
for(i in 1:k_cv) {
data_train <- train %>% filter(split != i)
data_test <- train %>% filter(split == i)
cl_train <- cl[folds != i]
cl_test <- cl[folds == i]
knn_output <- knn(data_train, data_test, cl_train, k_nn)
}
# store class and cv_error into a list
output <- list(class, cv_error)
return(output)
}
# loop through folds
for(i in 1:k_cv) {
data_train <- train %>% filter(split != i)
data_test <- train %>% filter(split == i)
cl_train <- cl[folds != i]
cl_test <- cl[folds == i]
knn_output <- knn(data_train, data_test, cl_train, k_nn)
}
train %>% filter(split != 1)
View(cl)
cl
# Load the `shiny` package
library(shiny)
?numericInput
runApp('INFO201/book-exercises/chapter-19-exercises/exercise-2')
# Define a new `ui` variable. This variable should be assigned a `fluidPage()` layout
# The `fluidPage()` layout should be passed the following:
ui <- fluidPage(
# A `titlePanel()` layout with the text "Cost Calculator"
titlePanel("Cost Calculator"),
# A `numericInput()` widget with the label "Price (in dollars)"
# It should have a default value of 0 and a minimum value of 0
# Hint: look up the function's arguments in the documentation!
numericInput("price", "Price (in dollars)", value = 0, min = 0),
# A second `numericInput()` widget with the label "Quantity"
# It should have a default value of 1 and a minimum value of 1
numericInput("quantity", "Quantity", value = 1, min = 1),
# The word "Cost", strongly bolded
# A `textOutput()` output of a calculated value labeled `cost`
textOutput("cost")
)
runApp('INFO201/book-exercises/chapter-19-exercises/exercise-2')
# Load libraries so they are available
library("shiny")
?a
# Define a variable `intro_panel` for your first page. It should be a
# `tabPanel()` with a title "Introduction" to represent the first tab.
# This layout will contain the following elements:
intro_panel <- tabPanel(
title = "Introduction",
# A `titlePanel()` with the text "Income Inequality"
titlePanel("Income Inequality"),
# A paragraph `p()` describing with the text: "The below diagram was created
# by the New York Times to illustrate the increasing level of inequality in
# the US."
p("The below diagram was created by the New York Times to illustrate the
increasing level of inequality in the US."),
# An image `img()` to display. This content should have a `src` attribute of
# "inequality.png" (which will refer to the file in the `www/` folder).
img(src = "inequality.png", alt = "Example NYT chart"),
# A paragraph containing a hyperlink `a()` to the source of the article at
# https://www.nytimes.com/interactive/2017/08/07/opinion/leonhardt-income-inequality.html
p(a(href = "https://www.nytimes.com/interactive/2017/08/07/opinion/leonhardt-income-inequality.html",
"(source)")),
# A paragraph containing a 1-2 sentence description of what the diagram
# shows. Your paragraph should include both `strong()` and emphasized `em()`
# text.
p("Rich gettin richer.")
# Define a variable `intro_panel` for your first page. It should be a
# `tabPanel()` with a title "Introduction" to represent the first tab.
# This layout will contain the following elements:
intro_panel <- tabPanel(
title = "Introduction",
# A `titlePanel()` with the text "Income Inequality"
titlePanel("Income Inequality"),
# A paragraph `p()` describing with the text: "The below diagram was created
# by the New York Times to illustrate the increasing level of inequality in
# the US."
p("The below diagram was created by the New York Times to illustrate the
increasing level of inequality in the US."),
# An image `img()` to display. This content should have a `src` attribute of
# "inequality.png" (which will refer to the file in the `www/` folder).
img(src = "inequality.png", alt = "Example NYT chart"),
# A paragraph containing a hyperlink `a()` to the source of the article at
# https://www.nytimes.com/interactive/2017/08/07/opinion/leonhardt-income-inequality.html
p(a(href = "https://www.nytimes.com/interactive/2017/08/07/opinion/leonhardt-income-inequality.html",
"(source)")),
# A paragraph containing a 1-2 sentence description of what the diagram
# shows. Your paragraph should include both `strong()` and emphasized `em()`
# text.
p("Rich gettin richer.")
# Finally, define a `ui` variable, assigning it a `navbarPage()` layout.
# You will use `shinyUI()` to render this variable (in `app.R`)
# Give the layout a title of "Income Inequality".
# The layout should include the following elements:
# - Your `intro_panel`
# - Your `growth_panel`
ui <- navbarPage(
title = "Income Inequality",
intro_panel
)
library("ggplot2")
# Read data file
income_growth <- read.csv("data/income_growth_1980-2014.csv")
setwd("~/INFO201/book-exercises/chapter-19-exercises/exercise-4")
# Read data file
income_growth <- read.csv("data/income_growth_1980-2014.csv")
# Define a server function
server <- function(input, output) {
output$plot <- renderPlot({
# return the plot
ggplot(data = income_growth) +
geom_point(mapping = aes(
x = Income.Percentile, y = Average.Growth.Perc
), color = "gray") +
geom_point(mapping = aes(
x = Income.Percentile, y = Post.Tax.Growth.Perc
), color = "red") +
labs(x = "Income Percentile", y = "Income Growth (%)") +
scale_x_continuous(limits = input$percentile)
})
}
# Define a variable `intro_panel` for your first page. It should be a
# `tabPanel()` with a title "Introduction" to represent the first tab.
# This layout will contain the following elements:
intro_panel <- tabPanel(
title = "Introduction",
# A `titlePanel()` with the text "Income Inequality"
titlePanel("Income Inequality"),
# A paragraph `p()` describing with the text: "The below diagram was created
# by the New York Times to illustrate the increasing level of inequality in
# the US."
p("The below diagram was created by the New York Times to illustrate the
increasing level of inequality in the US."),
# An image `img()` to display. This content should have a `src` attribute of
# "inequality.png" (which will refer to the file in the `www/` folder).
img(src = "inequality.png", alt = "Example NYT chart"),
# A paragraph containing a hyperlink `a()` to the source of the article at
# https://www.nytimes.com/interactive/2017/08/07/opinion/leonhardt-income-inequality.html
p(a(href = "https://www.nytimes.com/interactive/2017/08/07/opinion/leonhardt-income-inequality.html",
"(source)")),
# A paragraph containing a 1-2 sentence description of what the diagram
# shows. Your paragraph should include both `strong()` and emphasized `em()`
# text.
p("Rich gettin richer.")
# Finally, define a `ui` variable, assigning it a `navbarPage()` layout.
# You will use `shinyUI()` to render this variable (in `app.R`)
# Give the layout a title of "Income Inequality".
# The layout should include the following elements:
# - Your `intro_panel`
# - Your `growth_panel`
ui <- navbarPage(
title = "Income Inequality",
intro_panel
)
# Define a variable `intro_panel` for your first page. It should be a
# `tabPanel()` with a title "Introduction" to represent the first tab.
# This layout will contain the following elements:
intro_panel <- tabPanel(
title = "Introduction",
# A `titlePanel()` with the text "Income Inequality"
titlePanel("Income Inequality"),
# A paragraph `p()` describing with the text: "The below diagram was created
# by the New York Times to illustrate the increasing level of inequality in
# the US."
p("The below diagram was created by the New York Times to illustrate the
increasing level of inequality in the US."),
# An image `img()` to display. This content should have a `src` attribute of
# "inequality.png" (which will refer to the file in the `www/` folder).
img(src = "inequality.png", alt = "Example NYT chart"),
# A paragraph containing a hyperlink `a()` to the source of the article at
# https://www.nytimes.com/interactive/2017/08/07/opinion/leonhardt-income-inequality.html
p(a(href = "https://www.nytimes.com/interactive/2017/08/07/opinion/leonhardt-income-inequality.html",
"(source)")),
# A paragraph containing a 1-2 sentence description of what the diagram
# shows. Your paragraph should include both `strong()` and emphasized `em()`
# text.
p("Rich gettin richer.")
# Create a new `shinyApp()` using the loaded `ui` and `server` variables
shinyApp(ui, server)
runApp()
runApp()
runApp()
runApp()
# Define a server function
server <- function(input, output) {
output$plot <- renderPlot({
# return the plot
ggplot(data = income_growth) +
geom_point(mapping = aes(
x = Income.Percentile, y = Average.Growth.Perc
), color = "gray") +
geom_point(mapping = aes(
x = Income.Percentile, y = Post.Tax.Growth.Perc
), color = "red") +
labs(x = "Income Percentile", y = "Income Growth (%)") +
scale_x_continuous(limits = input$percentile)
})
}
# Define a variable `sidebar_content` as a `sidebarPanel()` UI element
# containing the following information:
sidebar_content <- sidebarPanel(
# A `sliderInput()` for the 'percentile' value, labeled "Income Percentile".
# This slider should let the user pick a range between 0 and 100
sliderInput("income.percentile", "Income Percentile", value = c(1, 100), min = 0, max = 100)
)
runApp()
runApp()
# Read data file
income_growth <- read.csv("data/income_growth_1980-2014.csv")
setwd("~/INFO201/book-exercises/chapter-19-exercises/exercise-4")
# Read data file
income_growth <- read.csv("data/income_growth_1980-2014.csv")
# Define a server function
server <- function(input, output) {
output$plot <- renderPlot({
# return the plot
ggplot(data = income_growth) +
geom_point(mapping = aes(
x = Income.Percentile, y = Average.Growth.Perc
), color = "gray") +
geom_point(mapping = aes(
x = Income.Percentile, y = Post.Tax.Growth.Perc
), color = "red") +
labs(x = "Income Percentile", y = "Income Growth (%)") +
scale_x_continuous(limits = input$percentile)
})
}
runApp()
