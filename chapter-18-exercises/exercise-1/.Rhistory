t.test(x, alternative = "greater", mu = 0)
# one-sided "greater" my_t.test
my_t.test(x, alternative = "greater", mu = 0)
# two-sided t.test
t.test(x, alternative = "two.sided", mu = 0)
# two-sided my_t.test
my_t.test(x, alternative = "two.sided", mu = 0)
format(lm_model, scientific = F)
# fit linear model with my_lm
m <- my_lm(mpg ~ hp +wt, mtcars)
format(m, scientific = F)
format(m, digits = 3, scientific = F)
format(m, digits = 2, scientific = F)
format(m, digits = 1, scientific = F)
format(m, digits = 0, scientific = F)
format(m, digits = 2, scientific = F)
?format
format(m, digits = 3, trim = T, scientific = F)
format(m, digits = 3, nsmall = 3, scientific = F)
format(m, digits = 3, width = 3, scientific = F)
format(m, digits = 3, width = 2, scientific = F)
format(m, digits = 3, width = 5, scientific = F)
format.AsIs(m, digits = 3, width = 5, scientific = F)
summary(lm_model)
m
format(m$Pr(>|t|), digits = 3, width = 5, scientific = T)
format(m[, 4], digits = 3, width = 5, scientific = T)
format(m[, 4], digits = 3, scientific = T)
format(m[, 4], scientific = T)
format(m[, 4], digits = 1, scientific = T)
format(m[, 4], digits = 2, scientific = T)
format(m[, 4], digits = 3, scientific = T)
m[, 4] <- format(m[, 4], digits = 3, scientific = T)
m
round(m, 5)
?mapply
?sapply
?apply
apply(m, round)
apply(m, FUN = round)
apply(m, 2, FUN = round)
apply(m, 2, round(5))
m
m[, -4] <- round(m[, -4], 5)
m[, -4] <- round(m[, 1], 5)
m[, 1] <- round(m[, 1], 5)
m[, -4] <- format(m[, -4], digits = 5)
m
m[, -4] <- format(m[, -4], digits = 3)
m
?format
m <- format(m, digits = 3)
m
class(m[1,1])
# fit linear model with my_lm
m <- my_lm(mpg ~ hp +wt, mtcars)
m
m <- format(m, digits = 5)
m
m <- format(m, digits = 3)
m
m <- format(m, digits = 3, scientific = F)
m
m <- format(m, digits = 3, scientific = F)
m
m <- format(m,  scientific = F)
m
format(m,  scientific = F)
# fit linear model with my_lm
m <- my_lm(mpg ~ hp +wt, mtcars)
m
format(m,  scientific = F)
m
m[, 4] <- format(m[, 4], digits = 3)
m
m[, 1:3] <- format
m[, 1:3] <- format(m[, 1:3], digits = 5, scientific = F)
m
m[, 1:3] <- format(m[, 1:3], digits = 3, scientific = F)
m
format(m[, 1:3], digits = 3, scientific = F)
format(m[, 1:3], digits = 1, scientific = F)
round(m[1,1], 5)
# function: my_lm, use given data to fit a linear model
# input: formula, formula object; data, data frame
# output: table with rows for each coefficient and columns for
# Estimate, Std. Error, t value, and Pr(>|t|)
my_lm <- function(formula, data) {
# extract model matrix X
matrix_x <- model.matrix(formula, data)
# extract model frame
m_frame <- model.frame(formula, data)
# extract model response Y using frame
response_y <- model.response(m_frame)
# solve for coefficients (estimate)
beta <- solve((t(matrix_x) %*% matrix_x)) %*% t(matrix_x) %*% response_y
# calculate degrees of freedom (sample size - covariates - intercept)
df <- nrow(data) - nrow(beta)
# estimate sigma hat squared
sigma <- sum((response_y - matrix_x %*% beta)^2 / df)
# calculate standard error with sigma squared
se <- diag(sqrt(sigma * solve((t(matrix_x) %*% matrix_x))))
# calculate t value
t_val <- beta / se
# calculate p-value (beta = 0)
p_val <- pt(abs(t_val), df, lower.tail = FALSE) * 2
result_table <- as.table(cbind(beta, se, t_val, p_val))
colnames(result_table) <- c("Estimate", "Std. Error", "t value", "Pr(>|t|)")
return(result_table)
}
summary(lm_model)
# fit linear model with my_lm
my_lm(mpg ~ hp +wt, mtcars)
m
m <- my_lm(mpg ~ hp +wt, mtcars)
m
format(m, scientific = F)
?svd
library(foreign)
ce <- read.dta
ce <- read.dta("http://statistics.ats.ucla.edu/stat/data/cerealnut.dta")
View(ce)
cesvd <- svd(ce[, -1])
cesvd
cssvd$u
cesvd$u
# Install and load the `ggplot2` package
# You will also want to load `dplyr`
library(ggplot2)
library(dplyr)
# For this exercise you'll be working with the `diamonds` data set included in
# the ggplot2 library
# Use `?diamonds` to get more information about this data set (including the
# column descriptions. Also check the _column names_ and the _number of rows_
# in the data set
load(diamonds)
# For this exercise you'll be working with the `diamonds` data set included in
# the ggplot2 library
# Use `?diamonds` to get more information about this data set (including the
# column descriptions. Also check the _column names_ and the _number of rows_
# in the data set
data(diamonds)
force(diamonds)
?sample_n
# This data set has A LOT of rows. To make things a bit more readable,
# use dplyr's `sample_n()` function to get a random 1000 rows from the data set
# Store this sample in a variable `diamonds_sample`
sample_n(diamonds, 1000)
# This data set has A LOT of rows. To make things a bit more readable,
# use dplyr's `sample_n()` function to get a random 1000 rows from the data set
# Store this sample in a variable `diamonds_sample`
diamond_sample <- sample_n(diamonds, 1000)
View(diamond_sample)
# Start by making a new `ggplot` with the `diamonds_sample` as the data (no
# geometry yet)
# What do you see? (What did you expect?)
ggplot(diamond_sample)
# Draw a scatter plot (with point geometry) with for the `diamonds_sample` set,
# with the `carat` mapped to the x-position and `price` mapped to the y-position.
ggplot(diamond_sample, aes(x = carat, y = price)) +
geom_point()
# Draw a scatter plot (with point geometry) with for the `diamonds_sample` set,
# with the `carat` mapped to the x-position and `price` mapped to the y-position.
dia_plot <- ggplot(diamond_sample, aes(x = carat, y = price)) +
geom_point()
?geom_point
# Draw the same plot as above, but color each of the points based on their
# clarity.
ggplot(diamond_sample, aes(x = carat, y = price)) +
geom_point(color = clarity)
?ggplot
# Draw the same plot as above, but color each of the points based on their
# clarity.
ggplot(diamond_sample, aes(x = carat, y = price, color = clarity)) +
geom_point()
# Draw the same plot as above, but for the entire `diamonds` data set. Note this
# may take a few seconds to generate.
ggplot(diamonds, aes(x = carat, y = price, color = clarity)) +
geom_point()
# This data set has A LOT of rows. To make things a bit more readable,
# use dplyr's `sample_n()` function to get a random 1000 rows from the data set
# Store this sample in a variable `diamonds_sample`
diamonds_sample <- sample_n(diamonds, 1000)
# Draw another scatter plot for `diamonds_sample` of price (y) by carat (x),
# but with all of the dots colored "blue".
# Hint: you'll need to set the color channel, not map a value to it!
ggplot(diamonds_sample, aes(x = carat, y = price, color = "clarity"blue)) +
geom_point()
# Draw another scatter plot for `diamonds_sample` of price (y) by carat (x),
# but with all of the dots colored "blue".
# Hint: you'll need to set the color channel, not map a value to it!
ggplot(diamonds_sample, aes(x = carat, y = price, color = "blue")) +
geom_point()
# Draw another scatter plot for `diamonds_sample` of price (y) by carat (x),
# but with all of the dots colored "blue".
# Hint: you'll need to set the color channel, not map a value to it!
ggplot(diamonds_sample, aes(x = carat, y = price, color = "blue")) +
geom_point()
# Draw another scatter plot for `diamonds_sample` of price (y) by carat (x),
# but with all of the dots colored "blue".
# Hint: you'll need to set the color channel, not map a value to it!
ggplot(diamonds_sample, aes(x = carat, y = price, color = clarity)) +
geom_point()
# Draw another scatter plot for `diamonds_sample` of price (y) by carat (x),
# but with all of the dots colored "blue".
# Hint: you'll need to set the color channel, not map a value to it!
ggplot(diamonds_sample, aes(x = carat, y = price)) +
geom_point(color = "blue")
# Draw a scatter plot for `diamonds_sample` of `price` by `carat`, where each
# point has an aesthetic _shape_ based on the diamond's `cut`.
ggplot(diamonds_sample, aes(x = carat, y = price, shape = cut)) +
geom_point()
# Draw a scatter plot for `diamonds_sample` of *`cut`* by `carat`, where each
# point has an aesthetic _size_ based on the diamond's *`price`*
ggplot(diamonds_sample, aes(x = carat, y = cut, size = price)) +
geom_point()
# Try coloring the above plot based on the diamond's price!
ggplot(diamonds_sample, aes(x = carat, y = cut, size = price, color = price)) +
geom_point()
# Draw a line plot (with line geometry) for `diamonds_sample`. The x-position
# should be mapped to carat, y-position to price, and color to cut.
ggplot(diamond_sample, aes(x = carat, y = price, color = cut)) +
geom_line()
# That's kind of messy. Try using `smooth` geometry instead.
ggplot(diamond_sample, aes(x = carat, y = price, color = cut)) +
geom_smooth()
# Draw a plot with column geometry (a bar chart), mapping the diamond's `cut` to
# the x-axis and `price` to the y-axis. Note that by default, column geometry
# will us the "sum" of all of the y-values, so that the chart is actually of the
# TOTAL value of all of the diamonds of that cut!
ggplot(diamond_sample, aes(x = cut, y = price)) +
geom_bar()
# Draw a plot with column geometry (a bar chart), mapping the diamond's `cut` to
# the x-axis and `price` to the y-axis. Note that by default, column geometry
# will us the "sum" of all of the y-values, so that the chart is actually of the
# TOTAL value of all of the diamonds of that cut!
ggplot(diamond_sample, aes(x = cut, y = price)) +
geom_col()
# Add an aesthetic property that will _fill_ each bar geometry based on the
# `clarity` of the diamonds.
# What kind of chart do you get?
ggplot(diamond_sample, aes(x = cut, y = price, fill = clarity)) +
geom_col()
# Draw a plot of the `diamonds_sample` data (price by carat), with both points
# for each diamond AND smoothed lines for each cut (hint: in a separate color)
# Give the points an `alpha` (transparency) of 0.3 to make the plot look nicer
ggplot(diamond_sample, aes(x = carat, y = price)) +
geom_point(alpha = 0.3, color = "lightblue") +
geom_smooth(color = "purple")
# Draw a plot of the `diamonds_sample` data (price by carat), with both points
# for each diamond AND smoothed lines for each cut (hint: in a separate color)
# Give the points an `alpha` (transparency) of 0.3 to make the plot look nicer
ggplot(diamond_sample, aes(x = carat, y = price)) +
geom_point(alpha = 0.3, color = "blue") +
geom_smooth(color = "purple")
# Draw a plot of the `diamonds_sample` data (price by carat), with both points
# for each diamond AND smoothed lines for each cut (hint: in a separate color)
# Give the points an `alpha` (transparency) of 0.3 to make the plot look nicer
ggplot(diamond_sample, aes(x = carat, y = price)) +
geom_point(alpha = 0.3) +
geom_smooth(color = "purple")
# Draw a column (bar) chart of diamonds cuts by price, with each bar filled by
# clarity. You should see a _stacked_ bar chart.
ggplot(diamonds, aes(cuts, price, fill = clarity)) +
geom_col()
# Draw a column (bar) chart of diamonds cuts by price, with each bar filled by
# clarity. You should see a _stacked_ bar chart.
ggplot(diamonds, aes(cut, price, fill = clarity)) +
geom_col()
# Draw the same chart again, but with each element positioned to "fill" the y axis
ggplot(diamonds, aes(cut, price, fill = clarity), position = "fill") +
geom_col()
# Draw the same chart again, but with each element positioned to "dodge" each other
ggplot(diamonds, aes(cut, price, fill = clarity), position = "dodge") +
geom_col()
# Draw the same chart again, but with each element positioned to "fill" the y axis
ggplot(diamonds, aes(cut, price, fill = clarity)) +
geom_col(position = "fill")
# Draw the same chart again, but with each element positioned to "dodge" each other
ggplot(diamonds, aes(cut, price, fill = clarity)) +
geom_col(position = "dodge")
# Draw a plot with point geometry with the x-position mapped to `cut` and the
# y-position mapped to `clarity`
# This creates a "grid" grouping the points
ggplot(diamonds, aes(cut, clarity)) +
geom_point()
# Use the "jitter" position adjustment to keep the points from all overlapping!
# (This works a little better with a sample of diamond data, such as from the
# previous exercise).
ggplot(diamonds, aes(cut, clarity)) +
geom_point(position = "jitter")
# Use the "jitter" position adjustment to keep the points from all overlapping!
# (This works a little better with a sample of diamond data, such as from the
# previous exercise).
ggplot(diamond_sample, aes(cut, clarity)) +
geom_point(position = "jitter")
# Draw a "boxplot" (with `geom_boxplot`) for the diamond's price (y) by color (x)
ggplot(diamonds, aes(color, price)) +
geom_boxplot()
# This has a lot of outliers, making it harder to read. To fix this, draw the
# same plot but with a _logarithmic_ scale for the y axis.
ggplot(diamonds, aes(color, price)) +
geom_boxplot() +
scale_y_log10()
# For another version, draw the same plot but with `violin` geometry instead of
# `boxplot` geometry!
# How does the logarithmic scale change the data presentation?
ggplot(diamonds, aes(color, price)) +
geom_violin() +
scale_y_log10()
# Another interesting plot: draw a plot of the diamonds price (y) by carat (x),
# using a heatmap of 2d bins (geom_bin2d)
# What happens when you make the x and y channels scale logarithmically?
ggplot(diamond, aes(carat, price, color = "clarity")) +
geom_point()
# Another interesting plot: draw a plot of the diamonds price (y) by carat (x),
# using a heatmap of 2d bins (geom_bin2d)
# What happens when you make the x and y channels scale logarithmically?
ggplot(diamonds, aes(carat, price, color = "clarity")) +
geom_point()
# Another interesting plot: draw a plot of the diamonds price (y) by carat (x),
# using a heatmap of 2d bins (geom_bin2d)
# What happens when you make the x and y channels scale logarithmically?
ggplot(diamonds, aes(carat, price, color = clarity)) +
geom_point()
# Another interesting plot: draw a plot of the diamonds price (y) by carat (x),
# using a heatmap of 2d bins (geom_bin2d)
# What happens when you make the x and y channels scale logarithmically?
ggplot(diamonds, aes(carat, price)) +
geom_bin2d() +
scale_x_log10() +
scale_y_log10()
# Draw a scatter plot for the diamonds price (y) by carat (x). Color each point
# by the clarity (Remember, this will take a while. Use a sample of the diamonds
# for faster results)
ggplot(diamond_sample, aes(carat, price, color = clarity)) +
geom_point()
# Change the color of the previous plot using a ColorBrewer scale of your choice.
# What looks nice?
ggplot(diamond_sample, aes(carat, price, color = clarity)) +
geom_point() +
scale_color_brewer(palette = "Set4")
# Change the color of the previous plot using a ColorBrewer scale of your choice.
# What looks nice?
ggplot(diamond_sample, aes(carat, price, color = clarity)) +
geom_point() +
scale_color_brewer(palette = "Set1")
# Change the color of the previous plot using a ColorBrewer scale of your choice.
# What looks nice?
ggplot(diamond_sample, aes(carat, price, color = clarity)) +
geom_point() +
scale_color_brewer(palette = "Set2")
# Change the color of the previous plot using a ColorBrewer scale of your choice.
# What looks nice?
ggplot(diamond_sample, aes(carat, price, color = clarity)) +
geom_point() +
scale_color_brewer(palette = "Set3")
# Change the color of the previous plot using a ColorBrewer scale of your choice.
# What looks nice?
ggplot(diamond_sample, aes(carat, price, color = clarity)) +
geom_point() +
scale_color_brewer(palette = "Set5")
# Change the color of the previous plot using a ColorBrewer scale of your choice.
# What looks nice?
ggplot(diamond_sample, aes(carat, price, color = clarity)) +
geom_point() +
scale_color_brewer(palette = "Set2")
# Draw a bar chart with x-position and fill color BOTH mapped to cut
# For best results, SET the `width` of the geometry to be 1 (fill plot, no space
# between)
# TIP: You can save the plot to a variable for easier modifications
ggplot(diamond_sample, aes(cut, fill = cut)) +
geom_bar(width = 1)
# Draw the same chart, but with the coordinate system flipped
ggplot(diamond_sample, aes(cut, fill = cut)) +
geom_bar(width = 1) +
coord_flip()
# Draw the same chart, but in a polar coordinate system. It's a Coxcomb chart!
ggplot(diamond_sample, aes(cut, fill = cut)) +
geom_bar(width = 1) +
coord_polar()
# Take the scatter plot of price by carat data (colored by clarity) and add
# _facets_ based on the diamond's `color`
ggplot(diamond_sample, aes(caart, price, color = clarity)) +
geom_point() +
facet_wrap(~color)
# Take the scatter plot of price by carat data (colored by clarity) and add
# _facets_ based on the diamond's `color`
ggplot(diamond_sample, aes(carat, price, color = clarity)) +
geom_point() +
facet_wrap(~color)
setwd("~/INFO201/book-exercises/chapter-16-exercises/exercise-2")
# Take the scatter plot of price by carat data (colored by clarity) and add
# _facets_ based on the diamond's `color`
dia_color <- ggplot(diamond_sample, aes(carat, price, color = clarity)) +
geom_point() +
facet_wrap(~color)
# Use the `ggsave()` function to save the current (recent) plot to disk.
# Name the output file "my-plot.png".
# Make sure you've set the working directory!!
ggsave("./my-plot.png")
# load relevant libraries
library("httr")
library("jsonlite")
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
#
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie_name` variable as the search query!
base_uri <- "https://api.nytimes.com/svc/movies/v2/"
resource <- "reviews/search.json"
query_params <- list(api_key = key, query = movie_name)
# Send the HTTP Request to download the data
# Extract the content and convert it from JSON
response <- GET(paste0(base_uri, resource), query = query_params)
setwd("~/INFO201/book-exercises/chapter-18-exercises/exercise-1")
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("apikey.R")
# Create a variable `movie_name` that is the name of a movie of your choice.
movie_name <- "Parasite"
query_params <- list(api_key = key, query = movie_name)
# Send the HTTP Request to download the data
# Extract the content and convert it from JSON
response <- GET(paste0(base_uri, resource), query = query_params)
body <- content(response, "text")
data <- fromJSON(body)
# What kind of data structure did this produce? A data frame? A list?
class(data)
View(data)
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("apikey.R")
# Create a variable `movie_name` that is the name of a movie of your choice.
movie_name <- "Parasite"
query_params <- list(api_key = key, query = movie_name)
# Send the HTTP Request to download the data
# Extract the content and convert it from JSON
response <- GET(paste0(base_uri, resource), query = query_params)
body <- content(response, "text")
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("apikey.R")
# Create a variable `movie_name` that is the name of a movie of your choice.
movie_name <- "Parasite"
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
#
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie_name` variable as the search query!
base_uri <- "https://api.nytimes.com/svc/movies/v2/"
resource <- "reviews/search.json"
query_params <- list(api_key = key, query = movie_name)
# Send the HTTP Request to download the data
# Extract the content and convert it from JSON
response <- GET(paste0(base_uri, resource), query = query_params)
body <- content(response, "text")
data <- fromJSON(body)
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("apikey.R")
query_params <- list(api_key = key, query = movie_name)
# Send the HTTP Request to download the data
# Extract the content and convert it from JSON
response <- GET(paste0(base_uri, resource), query = query_params)
body <- content(response, "text")
data <- fromJSON(body)
View(data)
query_params <- list(api-key = key, query = movie_name)
query_params <- list("api-key" = key, query = movie_name)
View(query_params)
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("apikey.R")
query_params <- list("api-key" = key, query = movie_name)
# Send the HTTP Request to download the data
# Extract the content and convert it from JSON
response <- GET(paste0(base_uri, resource), query = query_params)
body <- content(response, "text")
data <- fromJSON(body)
# What kind of data structure did this produce? A data frame? A list?
class(data)
View(data)
# Manually inspect the returned data and identify the content of interest
# (which are the movie reviews).
# Use functions such as `names()`, `str()`, etc.
names(data)
str(data)
movie_reviews <-
# Flatten the movie reviews content into a data structure called `reviews`
reviews <- flatten(data)
movie_reviews <- data$results
reviews <- data$results
# Flatten the movie reviews content into a data structure called `reviews`
reviews <- flatten(reviews)
View(reviews)
View(data)
# From the most recent review, store the headline, short summary, and link to
# the full article, each in their own variables
headline <- reviews$headline
short_summ <- reviews$summary_short
article_link <- reviews$link.url
# Create a list of the three pieces of information from above.
# Print out the list.
info_list <- list(headline = headline, short_summary = short_summ, article_link = article_link)
print(info_list)
